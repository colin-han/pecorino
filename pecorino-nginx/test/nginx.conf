worker_processes  1;

error_log  logs/nginx.log warn;
# pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/nginx_access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    #<< 支持websocket ------------------------------------------
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    #>> 支持websocket ------------------------------------------

#    upstream pecorino {
#        server pecorino:5003;
#    }
    <%= pecorino.UPSTREAMS %>

    server {
        listen                     80;
        server_name                114.215.16.218;

        proxy_http_version         1.1;
        proxy_redirect             off;
        # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
        proxy_set_header           Host $host;
        proxy_set_header           X-Real-IP $remote_addr;
        proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;
        # << 支持websocket ------------------------------------------
        proxy_set_header           Upgrade $http_upgrade;
        proxy_set_header           Connection $connection_upgrade;
        # >> 支持websocket ------------------------------------------
        client_max_body_size       10m; #允许客户端请求的最大单文件字节数
        client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数
        proxy_connect_timeout      300; #nginx跟后端服务器连接超时时间(代理连接超时)
        proxy_send_timeout         300; #后端服务器数据回传时间(代理发送超时)
        proxy_read_timeout         300; #连接成功后，后端服务器响应时间(代理接收超时)
        proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
        proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传
        # location /api/castle/ {
        #     rewrite                /api/castle/(.*) /$1 break;
        #     proxy_pass             http://castle;
        # }
        <%= pecorino.URL_REWRITES %>
    }
}
